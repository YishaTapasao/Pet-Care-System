/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package User;

import Admin.createUserForm;
import config.Session;
import config.dbConnector;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
import petcaresystemguic.loginForm;

/**
 *
 * @author Yisha
 */
public class AddAppointment extends javax.swing.JFrame {

    /**
     * Creates new form AddAppointment
     */
    public AddAppointment() {
        initComponents();
        displayOwnerPetData();
        
    }
    
    Color navcolor = new Color(0,0,0);
    Color hovercolor = new Color(51,51,51);
    
//        public void displayData(){
//        try{
//            dbConnector dbc = new dbConnector();
//            ResultSet rs = dbc.getData("SELECT u_id, app_id, pet_id, owner_id, appointment_date, appointment_time, service_type FROM tbl_appointment");
//            opTable.setModel(DbUtils.resultSetToTableModel(rs));
//             rs.close();
//        }catch(SQLException ex){
//            System.out.println("Errors: "+ex.getMessage());
//
//        }
//
//    }
    
//    public void displayOwnerPetData() {
//    try {
//        dbConnector dbc = new dbConnector();
//
//        String query = "SELECT o.owner_id, CONCAT(o.owner_fname, ' ', o.owner_lname) AS owner_name, " +
//                       "p.pet_id, p.pet_name " +
//                       "FROM tbl_owner o " +
//                       "JOIN tbl_pet p ON o.owner_id = p.owner_id";
//
//        ResultSet rs = dbc.getData(query);
//
//        // Gamit ang rs2xml para i-display ang ResultSet sa JTable
//        opTable.setModel(DbUtils.resultSetToTableModel(rs));
//
//        rs.close();
//    } catch (SQLException ex) {
//        System.out.println("Error loading owner-pet data: " + ex.getMessage());
//    }
//}
    
public void displayOwnerPetData() { 
    try {
        dbConnector dbc = new dbConnector();

        String query = "SELECT o.owner_id, CONCAT(o.owner_fname, ' ', o.owner_lname) AS owner_name, " +
                       "p.pet_id, p.pet_name, " +
                       "a.app_id, " +  // <-- gi-add appointment id diri
                       "a.service_type, a.appointment_date, a.appointment_time, a.status " +
                       "FROM tbl_owner o " +
                       "JOIN tbl_pet p ON o.owner_id = p.owner_id " +
                       "LEFT JOIN tbl_appointment a ON p.pet_id = a.pet_id";

        ResultSet rs = dbc.getData(query);

        // Gamit ang rs2xml para i-display ang ResultSet sa JTable
        opTable.setModel(DbUtils.resultSetToTableModel(rs));

        rs.close();
    } catch (SQLException ex) {
        System.out.println("Error loading owner-pet data: " + ex.getMessage());
    }
}

public void refreshForm() {
    // Reload table
    displayOwnerPetData();

    // Clear fields (example only; depends on your actual components)
    appid.setText("");
    oid.setText("");
    pid.setText("");
    date.setDate(null);
    time.setSelectedIndex(0);
    stype.setSelectedIndex(0);
    status.setSelectedIndex(0);

    // Re-enable fields
    oid.setEnabled(false);
    pid.setEnabled(false);
    appid.setEnabled(false);
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        date = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        stype = new javax.swing.JComboBox<>();
        time = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        acc_id = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        acc_name = new javax.swing.JLabel();
        acc_ln = new javax.swing.JLabel();
        p_add = new javax.swing.JPanel();
        add = new javax.swing.JPanel();
        addlabel = new javax.swing.JLabel();
        refresh = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        update = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        opTable = new javax.swing.JTable();
        pid = new javax.swing.JTextField();
        oid = new javax.swing.JTextField();
        appid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        status = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        date.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        date.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dateMouseClicked(evt);
            }
        });
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 590, 280, 70));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setText("OWNER/PET RECORDS");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 330, -1));

        stype.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        stype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Grooming", "Check up", "Vaccine" }));
        stype.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Service Type:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 18))); // NOI18N
        stype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stypeActionPerformed(evt);
            }
        });
        jPanel1.add(stype, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 740, 430, 90));

        time.setBackground(new java.awt.Color(255, 204, 204));
        time.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8:00 AM  ", "8:30 AM  ", "9:00 AM  ", "9:30 AM  ", "10:00 AM  ", "10:30 AM  ", "11:00 AM  ", "11:30 AM  ", "12:00 PM  ", "12:30 PM  ", "1:00 PM  ", "1:30 PM  ", "2:00 PM  ", "2:30 PM  ", "3:00 PM  ", "3:30 PM  ", "4:00 PM  ", "4:30 PM  ", "5:00 PM  ", "5:30 PM  ", "6:00 PM  ", "6:30 PM  ", "7:00 PM  ", "7:30 PM  ", "8:00 PM  ", "8:30 PM  ", "9:00 PM", " " }));
        time.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Time:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 18))); // NOI18N
        jPanel1.add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 740, 280, 80));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        acc_id.setBackground(new java.awt.Color(255, 204, 204));
        acc_id.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        acc_id.setForeground(new java.awt.Color(255, 204, 204));
        acc_id.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        acc_id.setText("ID");
        jPanel2.add(acc_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 200, 30));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Screenshot_2025-03-05_155149-removebg-preview.png"))); // NOI18N
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 130, 140));

        acc_name.setBackground(new java.awt.Color(255, 204, 204));
        acc_name.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        acc_name.setForeground(new java.awt.Color(255, 204, 204));
        acc_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        acc_name.setText("User");
        jPanel2.add(acc_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 200, 30));

        acc_ln.setBackground(new java.awt.Color(255, 204, 204));
        acc_ln.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        acc_ln.setForeground(new java.awt.Color(255, 204, 204));
        acc_ln.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel2.add(acc_ln, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 200, 30));

        p_add.setBackground(new java.awt.Color(51, 51, 51));
        p_add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p_addMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                p_addMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                p_addMouseExited(evt);
            }
        });
        p_add.setLayout(null);

        add.setBackground(new java.awt.Color(0, 0, 0));
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addMouseExited(evt);
            }
        });
        add.setLayout(null);

        addlabel.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        addlabel.setForeground(new java.awt.Color(255, 204, 204));
        addlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addlabel.setText("ADD");
        add.add(addlabel);
        addlabel.setBounds(30, 10, 140, 30);

        p_add.add(add);
        add.setBounds(0, 0, 200, 50);

        jPanel2.add(p_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 200, 50));

        refresh.setBackground(new java.awt.Color(0, 0, 0));
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshMouseExited(evt);
            }
        });
        refresh.setLayout(null);

        jLabel17.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 204, 204));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("REFRESH");
        refresh.add(jLabel17);
        jLabel17.setBounds(30, 10, 140, 30);

        jPanel2.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 400, 200, 50));

        update.setBackground(new java.awt.Color(0, 0, 0));
        update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateMouseExited(evt);
            }
        });
        update.setLayout(null);

        jLabel19.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 204, 204));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("UPDATE");
        update.add(jLabel19);
        jLabel19.setBounds(30, 10, 140, 30);

        jPanel2.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 200, 50));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 880));

        opTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        opTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                opTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(opTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 780, 310));

        pid.setBackground(new java.awt.Color(255, 204, 204));
        pid.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        pid.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Pet ID:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 18))); // NOI18N
        pid.setEnabled(false);
        pid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pidActionPerformed(evt);
            }
        });
        jPanel1.add(pid, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 620, 420, 70));

        oid.setBackground(new java.awt.Color(255, 204, 204));
        oid.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        oid.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Owner ID:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 18))); // NOI18N
        oid.setEnabled(false);
        oid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oidActionPerformed(evt);
            }
        });
        jPanel1.add(oid, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 510, 420, 70));

        appid.setBackground(new java.awt.Color(255, 204, 204));
        appid.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        appid.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Appointment ID:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 18))); // NOI18N
        appid.setEnabled(false);
        appid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appidActionPerformed(evt);
            }
        });
        jPanel1.add(appid, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, 420, 70));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Back_Clipart_Vector__Vector_Back_Icon__Back_Icons__Arrow__Back_PNG_Image_For_Free_Download-removebg-preview (1).png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 0, 50, 60));

        status.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Canceled" }));
        status.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Status:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 18))); // NOI18N
        jPanel1.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 430, 280, 90));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1060, 880));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void stypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stypeActionPerformed

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
  String ownerId = oid.getText().trim();
    String petId = pid.getText().trim();
    String userId = acc_id.getText().trim();

    java.util.Date selectedDate = date.getDate();
    String displayTime = time.getSelectedItem().toString();  // Example: "8:30 AM"
    String service = stype.getSelectedItem().toString();
    String statuses = status.getSelectedItem().toString();

    // Validation for empty fields
    if (ownerId.isEmpty() || petId.isEmpty() || userId.isEmpty() || selectedDate == null || displayTime.isEmpty() || service.isEmpty() || statuses.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please fill in all required fields!");
        return;
    }

    // Get current date & time
    java.util.Date now = new java.util.Date();

    // Validation: Dili pwede mo select ug past date
    if (selectedDate.before(now)) {
        // If date is today, check time
        SimpleDateFormat onlyDate = new SimpleDateFormat("yyyy-MM-dd");
        if (onlyDate.format(selectedDate).equals(onlyDate.format(now))) {
            // Convert time to 24-hr format
            SimpleDateFormat inputTimeFormat = new SimpleDateFormat("hh:mm a");
            SimpleDateFormat fullDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            try {
                java.util.Date selectedTime = inputTimeFormat.parse(displayTime);
                
                // Combine selected date + selected time
                Calendar calDate = Calendar.getInstance();
                calDate.setTime(selectedDate);

                Calendar calTime = Calendar.getInstance();
                calTime.setTime(selectedTime);

                calDate.set(Calendar.HOUR_OF_DAY, calTime.get(Calendar.HOUR_OF_DAY));
                calDate.set(Calendar.MINUTE, calTime.get(Calendar.MINUTE));
                calDate.set(Calendar.SECOND, 0);

                java.util.Date finalSelectedDateTime = calDate.getTime();

                if (finalSelectedDateTime.before(now)) {
                    JOptionPane.showMessageDialog(null, "You cannot select a past time.");
                    return;
                }

            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, "Invalid time format!");
                return;
            }

        } else {
            JOptionPane.showMessageDialog(null, "You cannot select a past date.");
            return;
        }
    }

    // Format date and time for MySQL
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String formattedDate = dateFormat.format(selectedDate);

    SimpleDateFormat displayFormat = new SimpleDateFormat("hh:mm a");
    SimpleDateFormat mysqlFormat = new SimpleDateFormat("HH:mm:ss");
    String formattedTime = "";
    try {
        java.util.Date parsedTime = displayFormat.parse(displayTime);
        formattedTime = mysqlFormat.format(parsedTime);
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(null, "Invalid time format!");
        return;
    }

    try {
        dbConnector dbc = new dbConnector();
       String query = "INSERT INTO tbl_appointment (pet_id, owner_id, user_id, appointment_date, appointment_time, service_type, status, remarks, medications) " +
               "VALUES ('" + petId + "', '" + ownerId + "', '" + userId + "', '" + formattedDate + "', '" + formattedTime + "', '" + service + "', '" + statuses + "', '', '')";
int result = dbc.insertData(query);

        if (result > 0) {
            JOptionPane.showMessageDialog(null, "Appointment added successfully!");
            
            refreshForm();
            // Optional: clear fields here
        } else {
            JOptionPane.showMessageDialog(null, "Failed to add appointment.");
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_addMouseClicked

    private void addMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseEntered
        add.setBackground(hovercolor);
        
    }//GEN-LAST:event_addMouseEntered

    private void addMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseExited
        add.setBackground(navcolor);
    }//GEN-LAST:event_addMouseExited

    private void p_addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p_addMouseClicked

    }//GEN-LAST:event_p_addMouseClicked

    private void p_addMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p_addMouseEntered

    }//GEN-LAST:event_p_addMouseEntered

    private void p_addMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p_addMouseExited

    }//GEN-LAST:event_p_addMouseExited

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked

        
        refreshForm();
        

    }//GEN-LAST:event_refreshMouseClicked

    private void refreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseEntered
        refresh.setBackground(hovercolor);
    }//GEN-LAST:event_refreshMouseEntered

    private void refreshMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseExited
        refresh.setBackground(navcolor);
    }//GEN-LAST:event_refreshMouseExited

    private void updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseClicked
    String appId = appid.getText() != null ? appid.getText().trim() : "";
    String userId = acc_id.getText() != null ? acc_id.getText().trim() : "";
    String ownerId = oid.getText() != null ? oid.getText().trim() : "";
    String petId = pid.getText() != null ? pid.getText().trim() : "";

    java.util.Date selectedDate = date.getDate();

    Object selTime = time.getSelectedItem();
    String displayTime = selTime != null ? selTime.toString() : "";

    Object selService = stype.getSelectedItem();
    String service = selService != null ? selService.toString() : "";

    Object selStatus = status.getSelectedItem();
    String statuses = selStatus != null ? selStatus.toString() : "";

    // For debugging: print values to console (optional)
    System.out.println("appId: '" + appId + "'");
    System.out.println("userId: '" + userId + "'");
    System.out.println("ownerId: '" + ownerId + "'");
    System.out.println("petId: '" + petId + "'");
    System.out.println("selectedDate: " + selectedDate);
    System.out.println("displayTime: '" + displayTime + "'");
    System.out.println("service: '" + service + "'");
    System.out.println("statuses: '" + statuses + "'");

    // Validation for empty fields
    if (appId.isEmpty() || ownerId.isEmpty() || petId.isEmpty() || userId.isEmpty() || 
        selectedDate == null || displayTime.isEmpty() || service.isEmpty() || statuses.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please fill in all required fields!");
        return;
    }

    // Get current date & time
    java.util.Date now = new java.util.Date();

    // Validation: Cannot select past date or past time today
    if (selectedDate.before(now)) {
        SimpleDateFormat onlyDate = new SimpleDateFormat("yyyy-MM-dd");
        if (onlyDate.format(selectedDate).equals(onlyDate.format(now))) {
            SimpleDateFormat inputTimeFormat = new SimpleDateFormat("hh:mm a");
            try {
                java.util.Date selectedTime = inputTimeFormat.parse(displayTime);

                Calendar calDate = Calendar.getInstance();
                calDate.setTime(selectedDate);

                Calendar calTime = Calendar.getInstance();
                calTime.setTime(selectedTime);

                calDate.set(Calendar.HOUR_OF_DAY, calTime.get(Calendar.HOUR_OF_DAY));
                calDate.set(Calendar.MINUTE, calTime.get(Calendar.MINUTE));
                calDate.set(Calendar.SECOND, 0);

                java.util.Date finalSelectedDateTime = calDate.getTime();

                if (finalSelectedDateTime.before(now)) {
                    JOptionPane.showMessageDialog(null, "You cannot select a past time.");
                    return;
                }

            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, "Invalid time format!");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot select a past date.");
            return;
        }
    }

    // Format date and time for MySQL update
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String formattedDate = dateFormat.format(selectedDate);

    SimpleDateFormat displayFormat = new SimpleDateFormat("hh:mm a");
    SimpleDateFormat mysqlFormat = new SimpleDateFormat("HH:mm:ss");
    String formattedTime = "";
    try {
        java.util.Date parsedTime = displayFormat.parse(displayTime);
        formattedTime = mysqlFormat.format(parsedTime);
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(null, "Invalid time format!");
        return;
    }

    try {
        dbConnector dbc = new dbConnector();
        String query = "UPDATE tbl_appointment SET " +
                       "appointment_date = '" + formattedDate + "', " +
                       "appointment_time = '" + formattedTime + "', " +
                       "service_type = '" + service + "', " +
                       "status = '" + statuses + "' " +
                       "WHERE app_id = '" + appId + "'";

        dbc.updateData(query); // assuming updateData returns void

       
         displayOwnerPetData();
        
        
        
        

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Failed to update appointment.\nError: " + e.getMessage());
    }
    }//GEN-LAST:event_updateMouseClicked

    private void updateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseEntered
        update.setBackground(hovercolor);
    }//GEN-LAST:event_updateMouseEntered

    private void updateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseExited
        update.setBackground(navcolor);
    }//GEN-LAST:event_updateMouseExited

    private void opTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opTableMouseClicked
//        int rowIndex = opTable.getSelectedRow();
//        if(rowIndex < 0){
//            JOptionPane.showMessageDialog(null, "Please select an item!");
//        }else{
//            try{
//                dbConnector dbc = new dbConnector();
//                TableModel tbl = opTable.getModel();
//                ResultSet rs = dbc.getData("SELECT * FROM tbl_appointment WHERE app_id ='"+tbl.getValueAt(rowIndex, 0)+"'");
//                if(rs.next()){
//                    createUserForm crf = new createUserForm();
//                    uid.setText(""+rs.getInt("u_id"));
//                    appid.setText(""+rs.getString("app_id"));
//                    oid.setText(""+rs.getString("owner_id"));
//                    pid.setText(""+rs.getString("pet_id"));
//
//
//                    add.setEnabled(false);
////                    addlabel.setForeground(red);
////                    checkadd = false;
//
//                }
//            }catch(SQLException ex){
//                System.out.println(""+ex);
//            }
//
//        }

// int rowIndex = opTable.getSelectedRow();
//    if (rowIndex < 0) {
//        JOptionPane.showMessageDialog(null, "Please select a row!");
//    } else {
//        // Get table model
//        TableModel tbl = opTable.getModel();
//
//        // Get values from selected row
//        String selectedOwnerId = tbl.getValueAt(rowIndex, 0).toString(); // assuming 1st column is owner_id
//        String selectedPetId = tbl.getValueAt(rowIndex, 2).toString();   // assuming 3rd column is pet_id
//
//        // Set values to text fields
//        oid.setText(selectedOwnerId);
//        pid.setText(selectedPetId);
//
//        // Disable editing if needed
//        oid.setEnabled(false);
//        pid.setEnabled(false);
//    }
int rowIndex = opTable.getSelectedRow();
if (rowIndex < 0) {
    JOptionPane.showMessageDialog(null, "Please select a row!");
} else {
    TableModel tbl = opTable.getModel();

    // Get values from the selected row
    String selectedOwnerId = tbl.getValueAt(rowIndex, 0).toString(); // owner_id
    String selectedPetId = tbl.getValueAt(rowIndex, 2).toString();   // pet_id
    String selectedAppId = tbl.getValueAt(rowIndex, 4) != null ? tbl.getValueAt(rowIndex, 4).toString() : ""; // app_id
    String selectedService = tbl.getValueAt(rowIndex, 5) != null ? tbl.getValueAt(rowIndex, 5).toString() : "";
    String selectedDate = tbl.getValueAt(rowIndex, 6) != null ? tbl.getValueAt(rowIndex, 6).toString() : "";
    String selectedTime = tbl.getValueAt(rowIndex, 7) != null ? tbl.getValueAt(rowIndex, 7).toString() : "";
    String selectedStatus = tbl.getValueAt(rowIndex, 8) != null ? tbl.getValueAt(rowIndex, 8).toString() : "";

    // Set values to text fields or components
    oid.setText(selectedOwnerId);
    pid.setText(selectedPetId);
    appid.setText(selectedAppId); // <-- Set the appointment id here

    // Assuming you have these components: 
    // stype (e.g., JComboBox), date (JDateChooser), time (JComboBox), status (JComboBox)
    stype.setSelectedItem(selectedService);

    try {
        if (!selectedDate.isEmpty()) {
            java.util.Date parsedDate = new SimpleDateFormat("yyyy-MM-dd").parse(selectedDate);
            date.setDate(parsedDate);
        } else {
            date.setDate(null);
        }
    } catch (ParseException e) {
        e.printStackTrace();
        date.setDate(null);
    }

    time.setSelectedItem(selectedTime);
    status.setSelectedItem(selectedStatus);

    // Disable editing if needed
    oid.setEnabled(false);
    pid.setEnabled(false);
    appid.setEnabled(false); // Optional: disable editing for app_id
}

    }//GEN-LAST:event_opTableMouseClicked

    private void pidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pidActionPerformed

    private void oidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oidActionPerformed

    private void appidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appidActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        Appointments app = new Appointments();
        app.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void dateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_dateMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       Session sess = Session.getInstance();
       if(sess.getUid()==0){
           JOptionPane.showMessageDialog(null, "No account, Login First!");
           loginForm lf = new loginForm();
           lf.setVisible(true);
           this.dispose();           
       }else{
       acc_name.setText(""+sess.getFname());
       acc_ln.setText(""+sess.getLname());
       acc_id.setText(""+sess.getUid());
           
       }  
             }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel acc_id;
    private javax.swing.JLabel acc_ln;
    private javax.swing.JLabel acc_name;
    private javax.swing.JPanel add;
    private javax.swing.JLabel addlabel;
    private javax.swing.JTextField appid;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField oid;
    private javax.swing.JTable opTable;
    private javax.swing.JPanel p_add;
    private javax.swing.JTextField pid;
    private javax.swing.JPanel refresh;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JComboBox<String> stype;
    private javax.swing.JComboBox<String> time;
    private javax.swing.JPanel update;
    // End of variables declaration//GEN-END:variables
}
